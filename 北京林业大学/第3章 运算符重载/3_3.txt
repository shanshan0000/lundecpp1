#include<iostream>
#include<cstring>
#include<cstdlib>
using namespace std;

class String{
private:
	char * s;
public:
	String();
	String(const char *);
	String(const String &);
	~String();
	String & operator=(const char *);
	String & operator=(const String &);
	friend istream & operator>>(istream &, String &);
	friend ostream & operator<<(ostream &, const String &);
};

String::String(){
	s = new char[1];
	s[0] = '\0';
}

String::String(const char * sp){
	s = new char[strlen(sp) + 1];
	strcpy_s(s,strlen(sp)+1,sp);
}

String::String(const String & str){
	s = new char[strlen(str.s) + 1];
	strcpy_s(s, strlen(str.s) + 1, str.s);
}

String::~String(){ delete [] s; }

String & String::operator=(const char * sp){
	delete [] s;
	s = new char[strlen(sp) + 1];
	strcpy_s(s, strlen(sp) + 1, sp);
	return *this;
}

String & String::operator=(const String & str){
	if (this != &str)
		*this = str.s;
	
	return *this;
}

istream & operator>>(istream & is, String & str){
	char temp[255];
	is >> temp;
	str = temp;
	return  is;
}

ostream & operator<<(ostream & os, const String & str){
	os << str.s;
	return os;
}


int main()
{
	String s1, s2("string2");
	String s3(s2);
	s1 = "string1";
	cout << s1 << "\n" << s2 << "\n" << s3 << endl;
	String s4;
	cin >> s4;
	s1 = s4;
	cout << s1 << "\n" << s4 << endl;

	system("pause");
	return 0;
}

+++++++++++++++++++++++++++++++++++

#include <iostream>
#include <cstring>
using namespace std;

class MyString{
private:
	char * str;
public:
	MyString();
	MyString(const char * s);
	MyString(const MyString &);
	~MyString();
	MyString & operator=(const MyString &);
	friend ostream & operator<<(ostream &, const MyString &);
	friend istream & operator>>(istream &, MyString &);
};

MyString::MyString(){
	str = NULL;
}

MyString::MyString(const char * s){
	str = new char[strlen(s) + 1];
	strcpy(str, s);
}

MyString::MyString(const MyString & s){
	str = new char[strlen(s.str) + 1];
	strcpy(str, s.str);
}

MyString::~MyString(){
	if(str!=NULL)
		delete [] str;
}

MyString & MyString::operator=(const MyString & s){
	if (str == s.str) return *this;
	if (str != NULL) {
		delete[] str;
		str = NULL;
	}
	str = new char[strlen(s.str) + 1];
	strcpy(str, s.str);
	return *this;
}

ostream & operator<<(ostream & os, const MyString & s){
	os << s.str;
	return os;
}

istream & operator>>(istream & is, MyString & s){
	if (s.str != NULL) {
		delete[] s.str;
		s.str = NULL;
	}
	s.str = new char[100];
	is >> s.str;
	return is;
}



int main(){
	MyString s1;
	cin >> s1;
	cout << s1 << endl;

	MyString s2("world");
	cout << s2 << endl;

	MyString s3(s2);
	cout << "copy of " << s2 << endl;

	cout << (s1 = s1) << endl;
	cout << (s1 = s2) << endl;

	return 0;
}

